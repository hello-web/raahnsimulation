Real-Time Autoencoder Augmented Hebbian Network(RAAHN) Simulation
=================================================================

Description
===========
RAAHN simulation is a simulator for testing and developing the Real-Time
Autoencoder Augmented Hebbian Network algorithm. The simulation consists
of a car driving in a simulated environment. It learns how to navigate
the environment with modulated hebbian learning (modulation signals
influencing hebbian learning, similar to reinforcement learning), and an
autoencoder. RAAHN Simulation uses libraahn for a RAAHN implementation.
libraahn is developed in parallel with RAAHN simulation.

Hot Keys
========
Globally

Esc - Close the application.
Scroll - Zoom in and out.

Simulation state

Up - Move the car foward in the direction of its velocity
Down - Move the car backward in the direction of its velocity.
Left - Rotate the car left.
Right - Rotate the car right.

Map state

Space - Place the starting point for the car represented by a flag.
Right Click - Add wall entities.

Building and Running
====================

RAAHN Simulation depends on gtk-sharp 2.12 and OpenTK 1.0. OpenTK is used
for OpenGL API access. GL 1.5 core profile is required, make sure your 
appropriate graphics driver is installed.

If using a GNU/Linux distribution, your package repositories probably have gtk-sharp and OpenTK.
In Debian based distributions the required packages are gtk-sharp2 and libopentk-cil-dev.
The package names are probably similar for most other distributions.

gtk-sharp 2.12 can be obtainned here: http://www.mono-project.com/download/#download-lin
OpenTK 1.0 can be obtainned here: http://sourceforge.net/projects/opentk/files/opentk/

After gtk-sharp and OpenTK binaries are installed into the GAC (Global Assembly Cache)
RAAHN Simulation should be ready to be built. If gtk-sharp or OpenTK shared libraries cannot
be installed in the GAC, just edit the reference paths within the RAAHN Simulation csproj file
to point to the location where you installed the libraries.

For all platforms an IDE compatible with solution and csproj files can be used to build the project.

Building with Mono
==================

From the root of the source tree type:

xbuild

Building with Windows
=====================

From the root of the source tree type:

msbuild
